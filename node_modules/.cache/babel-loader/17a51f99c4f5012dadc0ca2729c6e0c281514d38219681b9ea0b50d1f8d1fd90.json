{"ast":null,"code":"var _jsxFileName = \"/home/atorres/Dev/JS/slack-chat-bot-frontend-reactjs/src/layouts/listallentries/tables/table.js\",\n  _s = $RefreshSig$();\n// Table.js\nimport React from \"react\";\nimport { useTable } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Table(_ref) {\n  _s();\n  let {\n    columns,\n    data\n  } = _ref;\n  const {\n    getTableProps,\n    // propriedades da tabela\n    getTableBodyProps,\n    // propriedades do corpo da tabela\n    headerGroups,\n    // os valores de agrupamento de tabela, caso sua tabela use\n    rows,\n    // linhas da tabela baseado nos dados e colunas\n    prepareRow // Prepara a linha (Essa função deve ser chamada para cada linha)\n  } = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n        ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n          ...column.getHeaderProps(),\n          children: column.render(\"Header\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      ...getTableBodyProps(),\n      children: rows.map((row, i) => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              ...cell.getCellProps(),\n              children: cell.render(\"Cell\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 24\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(Table, \"hg75IbrBtYwvL764JElQ9b5yrB4=\", false, function () {\n  return [useTable];\n});\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useTable","Table","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"sources":["/home/atorres/Dev/JS/slack-chat-bot-frontend-reactjs/src/layouts/listallentries/tables/table.js"],"sourcesContent":["// Table.js\nimport React from \"react\";\nimport { useTable } from \"react-table\";\n\nfunction Table({ columns, data }) {\n  const {\n      getTableProps, // propriedades da tabela\n      getTableBodyProps, // propriedades do corpo da tabela\n      headerGroups, // os valores de agrupamento de tabela, caso sua tabela use\n      rows, // linhas da tabela baseado nos dados e colunas\n      prepareRow // Prepara a linha (Essa função deve ser chamada para cada linha)\n  } = useTable({\n      columns,\n      data\n  });\n  return (\n    <table {...getTableProps()}>\n        <thead>\n            {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => (\n                        <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n                    ))}\n                </tr>\n            ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n            {rows.map((row, i) => {\n                prepareRow(row);\n                return (\n                    <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,aAAa;AAAC;AAEvC,SAASC,KAAK,OAAoB;EAAA;EAAA,IAAnB;IAAEC,OAAO;IAAEC;EAAK,CAAC;EAC9B,MAAM;IACFC,aAAa;IAAE;IACfC,iBAAiB;IAAE;IACnBC,YAAY;IAAE;IACdC,IAAI;IAAE;IACNC,UAAU,CAAC;EACf,CAAC,GAAGR,QAAQ,CAAC;IACTE,OAAO;IACPC;EACJ,CAAC,CAAC;EACF,oBACE;IAAA,GAAWC,aAAa,EAAE;IAAA,wBACtB;MAAA,UACKE,YAAY,CAACG,GAAG,CAACC,WAAW,iBACzB;QAAA,GAAQA,WAAW,CAACC,mBAAmB,EAAE;QAAA,UACpCD,WAAW,CAACE,OAAO,CAACH,GAAG,CAACI,MAAM,iBAC3B;UAAA,GAAQA,MAAM,CAACC,cAAc,EAAE;UAAA,UAAGD,MAAM,CAACE,MAAM,CAAC,QAAQ;QAAC;UAAA;UAAA;UAAA;QAAA,QAC5D;MAAC;QAAA;QAAA;QAAA;MAAA,QAET;IAAC;MAAA;MAAA;MAAA;IAAA,QACE,eACR;MAAA,GAAWV,iBAAiB,EAAE;MAAA,UACzBE,IAAI,CAACE,GAAG,CAAC,CAACO,GAAG,EAAEC,CAAC,KAAK;QAClBT,UAAU,CAACQ,GAAG,CAAC;QACf,oBACI;UAAA,GAAQA,GAAG,CAACE,WAAW,EAAE;UAAA,UAC9BF,GAAG,CAACG,KAAK,CAACV,GAAG,CAAEW,IAAI,IAAK;YACvB,oBAAO;cAAA,GAAQA,IAAI,CAACC,YAAY,EAAE;cAAA,UAAGD,IAAI,CAACL,MAAM,CAAC,MAAM;YAAC;cAAA;cAAA;cAAA;YAAA,QAAM;UAChE,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QACC;MAET,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QACI;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEZ;AAAC,GApCQd,KAAK;EAAA,QAORD,QAAQ;AAAA;AAAA,KAPLC,KAAK;AAsCd,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}